Homework 2 Michael Yoshimura

# Part 1
1.1a. 0x2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1.1b. 0x879649e7504d2540f68b73d4244752c1ece2822ba0de59cc9a632b6fc0cda648d64bd3295d390028f79b8bfcc1b394ae9f0c21e542973672cb0fc00ba1a695f52fc8ef400eba63f9e2d86d1588ef887056aa7e71fb2ce08e98228b9eb3005aa79538237a238a5e94c54e937787489c9fbe25c41f0ff164705f4394c163b853b6a08204b99f1955183020d515c5c7b65c80309eece37da9281fa6fb9d2bf4c1e57b22b9c08317f82977ccada06957567ff6d9b18d83d1c5fca40714db8fb77fed19647d832e1e136b0d9099596d24229e37e55f70b2aa44c3ec4c489a5aeb1f31fae6691a5e1199263ff731d42b7a47d49110d9501ce9a1b1182b52d7512dd4c

1.2 We can compute 'a' given infinite resources. We have 'g', 'p', and g^a % p, which is the discrete log problem.
However, given a large enough p, the computing 'a' this way in a manner efficient enough to break cryptography is not possible. So given the resources I have, no, I cannot compute this.

1.3 p = 0x00984aca6e0bf7ac2a5999818f058faf98d4e18d5ec2bd33bbecdb924fb5ee85148003cac5047d366899db5ff99378ee6f498d9d6d13cafcf6def8ba9761c85f9b54cdfd9a123a9fc696b768d6d7a55425ca0fa3c41492b619e322b8c8fa18a3332ba0177ee92ad9a13e5e9e5e13c1d08dca75c17c3e331bf809d4a16331b8492ba744f444027de355d17211ffd1ba5e5e9a228fc2111da93e1eb7ae54052acb25f8de3c8ee6183dc69f5ea827ac9d1f54015eece8674c26930a5fc5b0e8772adb54ac79026556a31a74fdf5bcc803362c53b51e8ff0da21bf1d29c7dd667a011360ea88cbdc355ffd2bb2b84b7d674860967a0239024c8f1bd7f634f6b325413b
g = 2

# Part 2
2.1 Attack at 6pm

Here is the code I wrote. Basically, it iterates through all of the possible 24 times that could fit and encrypts
it using the public key. Then, I just compare to see if the ciphertexts are the same.

import os;
import itertools;
c = 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004476f5079fc8197cd6035aa598facf79323eab302ea8d66ebb137b5d9e9e3b1b26806526f92b5

command = """echo -n "Attack at XXX" | openssl rsautl -raw -pubin -inkey rsa-pub.pem | xxd -p -c 256"""

times = [str(i) + time for i, time in itertools.product(range(1, 13), ["am", "pm"])] # Uses a cartesian product

for i in times:
	stream = os.popen(command.replace("XXX", i))
	if int(stream.read(), 16) == c:
		print(i) # Prints 6am

2.2 The problem is that the message is very small, and there is a very small amount of possibilities so that an attacker
can enumerate every message ciphertext and guess. To solve this, add some extra random padding. This makes it so that
the attacker has to guess the random bits as well, which is much more difficult.

2.3 0x7a188798ac31a266f279ee8960c4d80b3eb5fed0cefe7d354df143a6594ed43cc641700eff7d926984b32104f806db9c61abadfca415013ce16d3eae5f581338b5f3c7daff9eb90dc5f8543cdd0bbd12938ac95bca96dc3e8ebd8c7714a88aef3287c23d00d6039200cbf029121e7e4dbab3340849278e5b726bbcf5c60e946c0a9f91aa9fac6c3b3fbf7b6fb1b99ba35b3447aba81a352c1cfae1e605ab4abe56621fba2e338ba6e6c8c9316b0381ce16f52e41f56cc2998351f128a90bc2072db88d4fbba1d854153d77f1c611d6480d09c629df11b9d518663d461634d3e600806aeff372e6b3a45adf4fd2d17c13b6ad10f852593e1cd7c9de4f68a41487

Here is the command: 
echo -n "miyo6032" | openssl rsautl -encrypt -pubin -inkey rsa-pub.pem | xxd -p -c 256

All I did was remove the -raw parameter, which makes it go to the default option which is to encrypt
with PKCS#1 v1.5 padding.